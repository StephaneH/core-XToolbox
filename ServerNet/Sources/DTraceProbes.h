/*
* This file is part of Wakanda software, licensed by 4D under
*  (i) the GNU General Public License version 3 (GNU GPL v3), or
*  (ii) the Affero General Public License version 3 (AGPL v3) or
*  (iii) a commercial license.
* This file remains the exclusive property of 4D and/or its licensors
* and is protected by national and international legislations.
* In any event, Licensee's compliance with the terms and conditions
* of the applicable license constitutes a prerequisite to any use of this file.
* Except as otherwise expressly stated in the applicable license,
* such license does not include any other license or rights on this file,
* 4D's and/or its licensors' trademarks and/or other proprietary rights.
* Consequently, no title, copyright or other proprietary rights
* other than those specified in the applicable license is granted.
*/
/*
 * Generated by dtrace(1M).
 */

#ifndef	_DTRACEPROBES_H
#define	_DTRACEPROBES_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define WAKANDA_STABILITY "___dtrace_stability$Wakanda$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define WAKANDA_TYPEDEFS "___dtrace_typedefs$Wakanda$v2"

#define	WAKANDA_READ_CONNECTION(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$read__connection$v1$7369676e656420696e74$63686172202a$7369676e656420696e74$63686172202a$7369676e656420696e74(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_READ_CONNECTION_ENABLED() \
	__dtrace_isenabled$Wakanda$read__connection$v1()
#define	WAKANDA_READ_DONE(arg0, arg1) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$read__done$v1$7369676e656420696e74$756e7369676e656420696e74(arg0, arg1); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_READ_DONE_ENABLED() \
	__dtrace_isenabled$Wakanda$read__done$v1()
#define	WAKANDA_READ_DUMP(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$read__dump$v1$7369676e656420696e74$7369676e656420696e74$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_READ_DUMP_ENABLED() \
	__dtrace_isenabled$Wakanda$read__dump$v1()
#define	WAKANDA_READ_START(arg0, arg1) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$read__start$v1$7369676e656420696e74$756e7369676e656420696e74(arg0, arg1); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_READ_START_ENABLED() \
	__dtrace_isenabled$Wakanda$read__start$v1()
#define	WAKANDA_WRITE_CONNECTION(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$write__connection$v1$7369676e656420696e74$63686172202a$7369676e656420696e74$63686172202a$7369676e656420696e74(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_WRITE_CONNECTION_ENABLED() \
	__dtrace_isenabled$Wakanda$write__connection$v1()
#define	WAKANDA_WRITE_DONE(arg0, arg1) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$write__done$v1$7369676e656420696e74$756e7369676e656420696e74(arg0, arg1); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_WRITE_DONE_ENABLED() \
	__dtrace_isenabled$Wakanda$write__done$v1()
#define	WAKANDA_WRITE_DUMP(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$write__dump$v1$7369676e656420696e74$7369676e656420696e74$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_WRITE_DUMP_ENABLED() \
	__dtrace_isenabled$Wakanda$write__dump$v1()
#define	WAKANDA_WRITE_START(arg0, arg1) \
do { \
	__asm__ volatile(".reference " WAKANDA_TYPEDEFS); \
	__dtrace_probe$Wakanda$write__start$v1$7369676e656420696e74$756e7369676e656420696e74(arg0, arg1); \
	__asm__ volatile(".reference " WAKANDA_STABILITY); \
} while (0)
#define	WAKANDA_WRITE_START_ENABLED() \
	__dtrace_isenabled$Wakanda$write__start$v1()


extern void __dtrace_probe$Wakanda$read__connection$v1$7369676e656420696e74$63686172202a$7369676e656420696e74$63686172202a$7369676e656420696e74(signed int, char *, signed int, char *, signed int);
extern int __dtrace_isenabled$Wakanda$read__connection$v1(void);
extern void __dtrace_probe$Wakanda$read__done$v1$7369676e656420696e74$756e7369676e656420696e74(signed int, unsigned int);
extern int __dtrace_isenabled$Wakanda$read__done$v1(void);
extern void __dtrace_probe$Wakanda$read__dump$v1$7369676e656420696e74$7369676e656420696e74$63686172202a(signed int, signed int, char *);
extern int __dtrace_isenabled$Wakanda$read__dump$v1(void);
extern void __dtrace_probe$Wakanda$read__start$v1$7369676e656420696e74$756e7369676e656420696e74(signed int, unsigned int);
extern int __dtrace_isenabled$Wakanda$read__start$v1(void);
extern void __dtrace_probe$Wakanda$write__connection$v1$7369676e656420696e74$63686172202a$7369676e656420696e74$63686172202a$7369676e656420696e74(signed int, char *, signed int, char *, signed int);
extern int __dtrace_isenabled$Wakanda$write__connection$v1(void);
extern void __dtrace_probe$Wakanda$write__done$v1$7369676e656420696e74$756e7369676e656420696e74(signed int, unsigned int);
extern int __dtrace_isenabled$Wakanda$write__done$v1(void);
extern void __dtrace_probe$Wakanda$write__dump$v1$7369676e656420696e74$7369676e656420696e74$63686172202a(signed int, signed int, char *);
extern int __dtrace_isenabled$Wakanda$write__dump$v1(void);
extern void __dtrace_probe$Wakanda$write__start$v1$7369676e656420696e74$756e7369676e656420696e74(signed int, unsigned int);
extern int __dtrace_isenabled$Wakanda$write__start$v1(void);

#ifdef	__cplusplus
}
#endif

#endif	/* _DTRACEPROBES_H */
